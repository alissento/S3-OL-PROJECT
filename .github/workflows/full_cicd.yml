name: 'Full CI/CD pipeline'
on:
  workflow_dispatch:

jobs:
  terraform: # Terraform deployment job
    name: 'Terraform Deployment'
    runs-on: ubuntu-latest # Use the latest version of Ubuntu

    defaults:
      run:
        shell: bash # Use bash as the shell for all steps

    steps:
    - name: Checkout Code # Checkout the repository
      uses: actions/checkout@v4

    - name: Install AWS CLI # Install the AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli 

    - name: Install Dependencies # Install boto3 and simplejson libraries
      run: pip install boto3 simplejson

    - name: Package Lambda Functions # Create a zip file for each Lambda function
      run: | 
        for FILE in lambdas/*.py; do
            FUNCTION_NAME=$(basename "${FILE%.*}")
            zip -r lambdas/${FUNCTION_NAME}.zip ${FILE}
        done
        cd lambdas
        ls -l

    - name: Setup Terraform CLI # Setup Terraform CLI
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS Credentials # Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: # Use the AWS credentials from the secrets
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-central-1'

    - name: Terraform Init # Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Terraform Format Check # Check if the Terraform code is formatted correctly
      run: |
        cd terraform
        terraform fmt -check -diff

    - name: Terraform Plan # Create an execution plan
      run: |
        cd terraform
        terraform plan -input=false

    - name: Terraform Apply # Apply the changes
      run: |
        cd terraform
        terraform apply -input=false -auto-approve

  data_injection: # Data Injection job
    name: 'Data Injection to DynamoDB'
    runs-on: ubuntu-latest # Use the latest version of Ubuntu
    needs: terraform # Wait for the Terraform deployment job to complete

    defaults:
      run:
        shell: bash # Use bash as the shell for all steps

    steps:
    - name: Checkout Code # Checkout the repository
      uses: actions/checkout@v4

    - name: Setup Python # Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use Python 3.x

    - name: Install Dependencies # Install boto3 library
      run: pip install boto3

    - name: Configure AWS Credentials  # Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: # Use the AWS credentials from the secrets
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-central-1'

    - name: Run Data Injection Script # Run the data injection script
      run: |
        cd scripts
        python3 data_injection.py


  website:
    name: 'Website deployment'
    runs-on: ubuntu-latest # Use the latest version of Ubuntu

    defaults:
      run:
        shell: bash # Use bash as the shell for all steps

    steps:
    - name: Checkout repository # Checkout the repository 
      uses: actions/checkout@v4

    - name: Setup Node.js # Setup Node.js version 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Set up Terraform CLI # Set up Terraform CLI 
      uses: hashicorp/setup-terraform@v3

    - name: Install AWS CLI # Install the AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli 

    - name: Configure AWS credentials # Configure AWS credentials for proper deployment
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-central-1'
        
    - name: Terraform init # Initialize Terraform
      run: |
        cd terraform
        terraform init  

    - name: Build website # Build the website using npm run build command 
      run: |
        cd vue-website
        npm install
        npm run tailwindbuild
        npm run build

    - name: Deploy to S3 bucket # Deploy the website to the S3 bucket
      run: |
        cd vue-website
        aws s3 sync dist/ s3://nknez.tech/ --delete

